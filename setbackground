#!/usr/bin/python3
#
# Copyright (c) 2020 Gareth Palmer <gareth.palmer3@gmail.com>
# This program is free software, distributed under the terms of
# the GNU General Public License Version 2.

import sys
import os.path
import re
import getopt
import traceback
import ipaddress
from html import escape
import requests
import requests.auth


class ProgramError(Exception):
    pass


def set_background(ip_address, timeout, image, icon, username, password):
    content = '<?xml version="1.0" encoding="UTF-8"?>' \
	'<setBackground>' \
          '<background>' \
            '<image>' + escape(image) + '</image>' \
            '<icon>' + escape(icon) + '</icon>' \
          '</background>' \
        '</setBackground>'

    if username != '':
        auth = requests.auth.HTTPBasicAuth(username, password)
    else:
        auth = None

    try:
        response = requests.post(f'http://{ip_address}/CGI/Execute',
                                 timeout = timeout, auth = auth, data = {'XML': content})
        response.raise_for_status()

    except requests.RequestException as error:
        raise ProgramError(error)

    print(f'Set background to {image}')


def main():
    short_options = 'i:t:u:p:h'
    long_options = ['ip=', 'timeout=', 'username=', 'password=', 'help']

    try:
        options, arguments = getopt.gnu_getopt(sys.argv[1:], short_options, long_options)
    except getopt.GetoptError as error:
        raise ProgramError(error.msg[0].upper() + error.msg[1:])

    ip_address = None
    timeout = 10
    username = ''
    password = ''
    help = False

    for option, argument in options:
        if option in ('-i', '--ip'):
            try:
                ip_address = ipaddress.IPv4Address(argument)
            except ipaddress.AddressValueError:
                raise ProgramError(f'Invalid IP-address: {argument}')

            ip_address = ip_address.compressed

        if option in ('-t', '--timeout'):
            try:
                timeout = int(argument)
            except ValueError:
                raise ProgramError(f'Invalid timeout: {argument}')

        elif option in ('-u', '--username'):
            username = argument

        elif option in ('-p', '--password'):
            password = argument

        elif option in ('-h', '--help'):
            help = True

    if help:
        print('Usage: ' + os.path.basename(sys.argv[0]) + ' [OPTIONS] IMAGE ICON\n'
              'Set the background image on a Cisco IP Phone\n'
              '\n'
              '  -i, --ip IP-ADDRESS        IP-address of the phone\n'
              '  -t, --timeout TIMEOUT      request timeout in seconds (default 10)\n'
              '  -u, --username USERNAME    authentication username\n'
              '  -p, --password PASSWORD    authentication password\n'
              '\n'
              'IMAGE and ICON are either an http: or https: URL\n'
              'ICON is the thumbnail preview of the image\n')

        return

    if len(arguments) < 1:
        raise ProgramError(f'No image provided')

    image = arguments[0]

    if not re.search(r'(?x) ^ https?:// ', image):
        raise ProgramError(f'Invalid image: {image}')

    if len(arguments) < 2:
        raise ProgramError(f'No icon provided')

    icon = arguments[1]

    if not re.search(r'(?x) ^ https?:// ', icon):
        raise ProgramError(f'Invalid icon: {icon}')

    if ip_address is None:
        raise ProgramError('No -i/--ip option specified')

    set_background(ip_address, timeout, image, icon, username, password)


if __name__ == '__main__':
    try:
        main()

    except ProgramError as error:
        print(str(error), file = sys.stderr)
        exit(1)

    except Exception:
        traceback.print_exc(file = sys.stderr)
        exit(1)

    exit(0)
